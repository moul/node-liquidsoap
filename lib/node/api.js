// Generated by CoffeeScript 1.4.0
(function() {
  var API, mixin, stringify, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  _ref = require("./utils"), stringify = _ref.stringify, mixin = _ref.mixin;

  module.exports.API = API = {};

  API.Private = {};

  API.Private.Source = (function() {

    Source.create = function(client, opts, fn) {
      var res, _ref1;
      res = new this(client, opts);
      delete opts.type;
      if (opts.sources == null) {
        if (((_ref1 = opts.source) != null ? _ref1.name : void 0) != null) {
          opts.source = opts.source.name;
        } else if (client.name != null) {
          opts.source = client.name;
        } else {
          delete opts.source;
        }
      }
      return res.http_request({
        method: "POST",
        path: this.path,
        query: stringify(opts),
        expects: 201
      }, function(err) {
        if (err != null) {
          return fn(err, null);
        }
        return fn(null, res);
      });
    };

    function Source(src, opts) {
      if (opts.sources != null) {
        this.name = opts.options.name;
      } else {
        this.name = opts.name || (opts.name = src.name);
      }
      mixin(src, this);
      delete this.sources;
      this;

    }

    Source.prototype.skip = function(fn) {
      return this.http_request({
        method: "PUT",
        path: "/sources/" + this.name + "/skip"
      }, fn);
    };

    Source.prototype.shutdown = function(fn) {
      return this.http_request({
        method: "DELETE",
        path: "/sources/" + this.name
      }, fn);
    };

    return Source;

  })();

  API.Private.Stateful = (function(_super) {

    __extends(Stateful, _super);

    function Stateful() {
      return Stateful.__super__.constructor.apply(this, arguments);
    }

    Stateful.prototype.start = function(fn) {
      return this.http_request({
        method: "PUT",
        path: "/sources/" + this.name + "/start"
      }, fn);
    };

    Stateful.prototype.stop = function(fn) {
      return this.http_request({
        method: "PUT",
        path: "/sources/" + this.name + "/stop"
      }, fn);
    };

    Stateful.prototype.status = function(fn) {
      return this.http_request({
        method: "GET",
        path: "/sources/" + this.name + "/status"
      }, fn);
    };

    return Stateful;

  })(API.Private.Source);

}).call(this);
